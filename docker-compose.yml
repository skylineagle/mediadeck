services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080" # Dashboard
      - "5432:5432" # PostgreSQL TCP entrypoint
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./compose/traefik:/etc/traefik
    networks:
      - monitoring
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"

  mediamtx:
    image: bluenviron/mediamtx:1.10.0
    container_name: mediamtx
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8554:8554" # RTSP
      - "5555:5555" # UDP stream
      - "8888:8888" # HLS
      - "8889:8889" # WebRTC
      - "9997:9997" # API
      - "9998:9998" # Metrics
    networks:
      monitoring:
        aliases:
          - mediamtx.localhost
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MEDIAMTX_URL=http://localhost:9997
    labels:
      - "traefik.enable=true"
      # API endpoint
      - "traefik.http.routers.mediamtx-api.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.routers.mediamtx-api.service=mediamtx-api"
      - "traefik.http.routers.mediamtx-api.entrypoints=web"
      - "traefik.http.services.mediamtx-api.loadbalancer.server.port=9997"
      # Metrics endpoint
      - "traefik.http.routers.mediamtx-metrics.rule=Host(`metrics.${DOMAIN_NAME}`)"
      - "traefik.http.routers.mediamtx-metrics.service=mediamtx-metrics"
      - "traefik.http.routers.mediamtx-metrics.entrypoints=web"
      - "traefik.http.services.mediamtx-metrics.loadbalancer.server.port=9998"
      # HLS endpoint
      - "traefik.http.routers.mediamtx-hls.rule=Host(`hls.${DOMAIN_NAME}`)"
      - "traefik.http.routers.mediamtx-hls.service=mediamtx-hls"
      - "traefik.http.routers.mediamtx-hls.entrypoints=web"
      - "traefik.http.services.mediamtx-hls.loadbalancer.server.port=8888"
      # WebRTC endpoint
      - "traefik.http.routers.mediamtx-webrtc.rule=Host(`webrtc.${DOMAIN_NAME}`)"
      - "traefik.http.routers.mediamtx-webrtc.service=mediamtx-webrtc"
      - "traefik.http.routers.mediamtx-webrtc.entrypoints=web"
      - "traefik.http.services.mediamtx-webrtc.loadbalancer.server.port=8889"

  sync:
    image: oven/bun:1
    container_name: mediamtx-sync
    depends_on:
      postgres:
        condition: service_healthy
      mediamtx:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://postgres:bgCHKMhIKNov8PaG@postgres:5432/mediamtx-panel
      - MEDIAMTX_URL=http://mediamtx:9997
    networks:
      - monitoring
    volumes:
      - .:/app
    working_dir: /app
    command: ["bun", "run", "sync"]

  postgres:
    image: postgres:latest
    container_name: mediamtx-panel-postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=bgCHKMhIKNov8PaG
      - POSTGRES_DB=mediamtx-panel
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entrypoints=tcp"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"
    networks:
      - monitoring
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data: {}
