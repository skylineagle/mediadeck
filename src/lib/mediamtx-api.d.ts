/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v3/config/global/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns the global configuration. */
    get: operations["configGlobalGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/global/patch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * patches the global configuration.
     * @description all fields are optional.
     */
    patch: operations["configGlobalSet"];
    trace?: never;
  };
  "/v3/config/pathdefaults/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns the default path configuration. */
    get: operations["configPathDefaultsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/pathdefaults/patch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * patches the default path configuration.
     * @description all fields are optional.
     */
    patch: operations["configPathDefaultsPatch"];
    trace?: never;
  };
  "/v3/config/paths/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all path configurations. */
    get: operations["configPathsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/paths/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a path configuration. */
    get: operations["configPathsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/paths/add/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * adds a path configuration.
     * @description all fields are optional.
     */
    post: operations["configPathsAdd"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/paths/patch/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * patches a path configuration.
     * @description all fields are optional.
     */
    patch: operations["configPathsPatch"];
    trace?: never;
  };
  "/v3/config/paths/replace/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * replaces all values of a path configuration.
     * @description all fields are optional.
     */
    post: operations["configPathsReplace"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/config/paths/delete/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** removes a path configuration. */
    delete: operations["configPathsDelete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/hlsmuxers/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all HLS muxers. */
    get: operations["hlsMuxersList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/hlsmuxers/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a HLS muxer. */
    get: operations["hlsMuxersGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/paths/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all paths. */
    get: operations["pathsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/paths/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a path. */
    get: operations["pathsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspconns/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTSP connections. */
    get: operations["rtspConnsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspconns/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTSP connection. */
    get: operations["rtspConnsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspsessions/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTSP sessions. */
    get: operations["rtspSessionsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspsessions/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTSP session. */
    get: operations["rtspSessionsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspsessions/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a RTSP session from the server. */
    post: operations["rtspSessionsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspsconns/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTSPS connections. */
    get: operations["rtspsConnsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspsconns/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTSPS connection. */
    get: operations["rtspsConnsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspssessions/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTSPS sessions. */
    get: operations["rtspsSessionsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspssessions/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTSPS session. */
    get: operations["rtspsSessionsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtspssessions/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a RTSPS session from the server. */
    post: operations["rtspsSessionsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpconns/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTMP connections. */
    get: operations["rtmpConnsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpconns/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTMP connection. */
    get: operations["rtmpConnectionsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpconns/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a RTMP connection from the server. */
    post: operations["rtmpConnsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpsconns/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all RTMPS connections. */
    get: operations["rtmpsConnsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpsconns/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a RTMPS connection. */
    get: operations["rtmpsConnectionsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rtmpsconns/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a RTMPS connection from the server. */
    post: operations["rtmpsConnsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/srtconns/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all SRT connections. */
    get: operations["srtConnsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/srtconns/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a SRT connection. */
    get: operations["srtConnsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/srtconns/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a SRT connection from the server. */
    post: operations["srtConnsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/webrtcsessions/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all WebRTC sessions. */
    get: operations["webrtcSessionsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/webrtcsessions/get/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns a WebRTC session. */
    get: operations["webrtcSessionsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/webrtcsessions/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** kicks out a WebRTC session from the server. */
    post: operations["webrtcSessionsKick"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/recordings/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns all recordings. */
    get: operations["recordingsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/recordings/get/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** returns recordings for a path. */
    get: operations["recordingsGet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/recordings/deletesegment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** deletes a recording segment. */
    delete: operations["recordingsDeleteSegment"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      error?: string;
    };
    AuthInternalUser: {
      user?: string;
      pass?: string;
      ips?: string[];
      permissions?: components["schemas"]["AuthInternalUserPermission"][];
    };
    AuthInternalUserPermission: {
      action?: string;
      path?: string;
    };
    GlobalConf: {
      logLevel?: string;
      logDestinations?: string[];
      logFile?: string;
      readTimeout?: string;
      writeTimeout?: string;
      writeQueueSize?: number;
      udpMaxPayloadSize?: number;
      runOnConnect?: string;
      runOnConnectRestart?: boolean;
      runOnDisconnect?: string;
      authMethod?: string;
      authInternalUsers?: components["schemas"]["AuthInternalUser"][];
      authHTTPAddress?: string;
      authHTTPExclude?: components["schemas"]["AuthInternalUserPermission"][];
      authJWTJWKS?: string;
      authJWTClaimKey?: string;
      api?: boolean;
      apiAddress?: string;
      apiEncryption?: boolean;
      apiServerKey?: string;
      apiServerCert?: string;
      apiAllowOrigin?: string;
      apiTrustedProxies?: string[];
      metrics?: boolean;
      metricsAddress?: string;
      metricsEncryption?: boolean;
      metricsServerKey?: string;
      metricsServerCert?: string;
      metricsAllowOrigin?: string;
      metricsTrustedProxies?: string[];
      pprof?: boolean;
      pprofAddress?: string;
      pprofEncryption?: boolean;
      pprofServerKey?: string;
      pprofServerCert?: string;
      pprofAllowOrigin?: string;
      pprofTrustedProxies?: string[];
      playback?: boolean;
      playbackAddress?: string;
      playbackEncryption?: boolean;
      playbackServerKey?: string;
      playbackServerCert?: string;
      playbackAllowOrigin?: string;
      playbackTrustedProxies?: string[];
      rtsp?: boolean;
      rtspTransports?: string[];
      rtspEncryption?: string;
      rtspAddress?: string;
      rtspsAddress?: string;
      rtpAddress?: string;
      rtcpAddress?: string;
      multicastIPRange?: string;
      multicastRTPPort?: number;
      multicastRTCPPort?: number;
      rtspServerKey?: string;
      rtspServerCert?: string;
      rtspAuthMethods?: string[];
      rtmp?: boolean;
      rtmpAddress?: string;
      rtmpEncryption?: string;
      rtmpsAddress?: string;
      rtmpServerKey?: string;
      rtmpServerCert?: string;
      hls?: boolean;
      hlsAddress?: string;
      hlsEncryption?: boolean;
      hlsServerKey?: string;
      hlsServerCert?: string;
      hlsAllowOrigin?: string;
      hlsTrustedProxies?: string[];
      hlsAlwaysRemux?: boolean;
      hlsVariant?: string;
      hlsSegmentCount?: number;
      hlsSegmentDuration?: string;
      hlsPartDuration?: string;
      hlsSegmentMaxSize?: string;
      hlsDirectory?: string;
      hlsMuxerCloseAfter?: string;
      webrtc?: boolean;
      webrtcAddress?: string;
      webrtcEncryption?: boolean;
      webrtcServerKey?: string;
      webrtcServerCert?: string;
      webrtcAllowOrigin?: string;
      webrtcTrustedProxies?: string[];
      webrtcLocalUDPAddress?: string;
      webrtcLocalTCPAddress?: string;
      webrtcIPsFromInterfaces?: boolean;
      webrtcIPsFromInterfacesList?: string[];
      webrtcAdditionalHosts?: string[];
      webrtcICEServers2?: {
        url?: string;
        username?: string;
        password?: string;
        clientOnly?: boolean;
      }[];
      webrtcHandshakeTimeout?: string;
      webrtcTrackGatherTimeout?: string;
      srt?: boolean;
      srtAddress?: string;
    };
    PathConf: {
      name?: string;
      source?: string;
      sourceFingerprint?: string;
      sourceOnDemand?: boolean;
      sourceOnDemandStartTimeout?: string;
      sourceOnDemandCloseAfter?: string;
      maxReaders?: number;
      srtReadPassphrase?: string;
      fallback?: string;
      record?: boolean;
      recordPath?: string;
      recordFormat?: string;
      recordPartDuration?: string;
      recordSegmentDuration?: string;
      recordDeleteAfter?: string;
      overridePublisher?: boolean;
      srtPublishPassphrase?: string;
      rtspTransport?: string;
      rtspAnyPort?: boolean;
      rtspRangeType?: string;
      rtspRangeStart?: string;
      sourceRedirect?: string;
      rpiCameraCamID?: number;
      rpiCameraWidth?: number;
      rpiCameraHeight?: number;
      rpiCameraHFlip?: boolean;
      rpiCameraVFlip?: boolean;
      rpiCameraBrightness?: number;
      rpiCameraContrast?: number;
      rpiCameraSaturation?: number;
      rpiCameraSharpness?: number;
      rpiCameraExposure?: string;
      rpiCameraAWB?: string;
      rpiCameraAWBGains?: number[];
      rpiCameraDenoise?: string;
      rpiCameraShutter?: number;
      rpiCameraMetering?: string;
      rpiCameraGain?: number;
      rpiCameraEV?: number;
      rpiCameraROI?: string;
      rpiCameraHDR?: boolean;
      rpiCameraTuningFile?: string;
      rpiCameraMode?: string;
      rpiCameraFPS?: number;
      rpiCameraAfMode?: string;
      rpiCameraAfRange?: string;
      rpiCameraAfSpeed?: string;
      rpiCameraLensPosition?: number;
      rpiCameraAfWindow?: string;
      rpiCameraFlickerPeriod?: number;
      rpiCameraTextOverlayEnable?: boolean;
      rpiCameraTextOverlay?: string;
      rpiCameraCodec?: string;
      rpiCameraIDRPeriod?: number;
      rpiCameraBitrate?: number;
      rpiCameraProfile?: string;
      rpiCameraLevel?: string;
      runOnInit?: string;
      runOnInitRestart?: boolean;
      runOnDemand?: string;
      runOnDemandRestart?: boolean;
      runOnDemandStartTimeout?: string;
      runOnDemandCloseAfter?: string;
      runOnUnDemand?: string;
      runOnReady?: string;
      runOnReadyRestart?: boolean;
      runOnNotReady?: string;
      runOnRead?: string;
      runOnReadRestart?: boolean;
      runOnUnread?: string;
      runOnRecordSegmentCreate?: string;
      runOnRecordSegmentComplete?: string;
    };
    PathConfList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["PathConf"][];
    };
    Path: {
      name?: string;
      confName?: string;
      source?: components["schemas"]["PathSource"];
      ready?: boolean;
      readyTime?: string | null;
      tracks?: string[];
      /** Format: int64 */
      bytesReceived?: number;
      /** Format: int64 */
      bytesSent?: number;
      readers?: components["schemas"]["PathReader"][];
    };
    PathList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["Path"][];
    };
    PathSource: {
      /** @enum {string} */
      type?:
        | "hlsSource"
        | "redirect"
        | "rpiCameraSource"
        | "rtmpConn"
        | "rtmpSource"
        | "rtspSession"
        | "rtspSource"
        | "rtspsSession"
        | "srtConn"
        | "srtSource"
        | "udpSource"
        | "webRTCSession"
        | "webRTCSource";
      id?: string;
    };
    PathReader: {
      /** @enum {string} */
      type?:
        | "hlsMuxer"
        | "rtmpConn"
        | "rtspSession"
        | "rtspsSession"
        | "srtConn"
        | "webRTCSession";
      id?: string;
    };
    HLSMuxer: {
      path?: string;
      created?: string;
      lastRequest?: string;
      /** Format: int64 */
      bytesSent?: number;
    };
    HLSMuxerList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["HLSMuxer"][];
    };
    Recording: {
      name?: string;
      segments?: components["schemas"]["RecordingSegment"][];
    };
    RecordingList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["Recording"][];
    };
    RecordingSegment: {
      start?: string;
    };
    RTMPConn: {
      id?: string;
      created?: string;
      remoteAddr?: string;
      /** @enum {string} */
      state?: "idle" | "read" | "publish";
      path?: string;
      query?: string;
      /** Format: int64 */
      bytesReceived?: number;
      /** Format: int64 */
      bytesSent?: number;
    };
    RTMPConnList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["RTMPConn"][];
    };
    RTSPConn: {
      id?: string;
      created?: string;
      remoteAddr?: string;
      /** Format: int64 */
      bytesReceived?: number;
      /** Format: int64 */
      bytesSent?: number;
      session?: string | null;
    };
    RTSPConnList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["RTSPConn"][];
    };
    RTSPSession: {
      id?: string;
      created?: string;
      remoteAddr?: string;
      /** @enum {string} */
      state?: "idle" | "read" | "publish";
      path?: string;
      query?: string;
      transport?: string | null;
      /** Format: int64 */
      bytesReceived?: number;
      /** Format: int64 */
      bytesSent?: number;
      /** Format: int64 */
      rtpPacketsReceived?: number;
      /** Format: int64 */
      rtpPacketsSent?: number;
      /** Format: int64 */
      rtpPacketsLost?: number;
      /** Format: int64 */
      rtpPacketsInError?: number;
      /** Format: float64 */
      rtpPacketsJitter?: number;
      /** Format: int64 */
      rtcpPacketsReceived?: number;
      /** Format: int64 */
      rtcpPacketsSent?: number;
      /** Format: int64 */
      rtcpPacketsInError?: number;
    };
    RTSPSessionList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["RTSPSession"][];
    };
    SRTConn: {
      id?: string;
      created?: string;
      remoteAddr?: string;
      /** @enum {string} */
      state?: "idle" | "read" | "publish";
      path?: string;
      query?: string;
      /**
       * Format: int64
       * @description The total number of sent DATA packets, including retransmitted packets
       */
      packetsSent?: number;
      /**
       * Format: int64
       * @description The total number of received DATA packets, including retransmitted packets
       */
      packetsReceived?: number;
      /** Format: int64 */
      packetsReceivedBelated?: number;
      /**
       * Format: int64
       * @description The total number of unique DATA packets sent by the SRT sender
       */
      packetsSentUnique?: number;
      /**
       * Format: int64
       * @description The total number of unique original, retransmitted or recovered by the packet filter DATA packets received in time, decrypted without errors and, as a result, scheduled for delivery to the upstream application by the SRT receiver.
       */
      packetsReceivedUnique?: number;
      /**
       * Format: int64
       * @description The total number of data packets considered or reported as lost at the sender side. Does not correspond to the packets detected as lost at the receiver side.
       */
      packetsSendLoss?: number;
      /**
       * Format: int64
       * @description The total number of SRT DATA packets detected as presently missing (either reordered or lost) at the receiver side
       */
      packetsReceivedLoss?: number;
      /**
       * Format: int64
       * @description The total number of retransmitted packets sent by the SRT sender
       */
      packetsRetrans?: number;
      /**
       * Format: int64
       * @description The total number of retransmitted packets registered at the receiver side
       */
      packetsReceivedRetrans?: number;
      /**
       * Format: int64
       * @description The total number of sent ACK (Acknowledgement) control packets
       */
      packetsSentACK?: number;
      /**
       * Format: int64
       * @description The total number of received ACK (Acknowledgement) control packets
       */
      packetsReceivedACK?: number;
      /**
       * Format: int64
       * @description The total number of sent NAK (Negative Acknowledgement) control packets
       */
      packetsSentNAK?: number;
      /**
       * Format: int64
       * @description The total number of received NAK (Negative Acknowledgement) control packets
       */
      packetsReceivedNAK?: number;
      /**
       * Format: int64
       * @description The total number of sent KM (Key Material) control packets
       */
      packetsSentKM?: number;
      /**
       * Format: int64
       * @description The total number of received KM (Key Material) control packets
       */
      packetsReceivedKM?: number;
      /**
       * Format: int64
       * @description The total accumulated time in microseconds, during which the SRT sender has some data to transmit, including packets that have been sent, but not yet acknowledged
       */
      usSndDuration?: number;
      /**
       * Format: int64
       * @description The total number of dropped by the SRT sender DATA packets that have no chance to be delivered in time
       */
      packetsSendDrop?: number;
      /**
       * Format: int64
       * @description The total number of dropped by the SRT receiver and, as a result, not delivered to the upstream application DATA packets
       */
      packetsReceivedDrop?: number;
      /**
       * Format: int64
       * @description The total number of packets that failed to be decrypted at the receiver side
       */
      packetsReceivedUndecrypt?: number;
      /**
       * Format: int64
       * @description Same as packetsSent, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesSent?: number;
      /**
       * Format: int64
       * @description Same as packetsReceived, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesReceived?: number;
      /** Format: int64 */
      bytesReceivedBelated?: number;
      /**
       * Format: int64
       * @description Same as packetsSentUnique, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesSentUnique?: number;
      /**
       * Format: int64
       * @description Same as packetsReceivedUnique, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesReceivedUnique?: number;
      /**
       * Format: int64
       * @description Same as packetsReceivedLoss, but expressed in bytes, including payload and all the headers (IP, TCP, SRT), bytes for the presently missing (either reordered or lost) packets' payloads are estimated based on the average packet size
       */
      bytesReceivedLoss?: number;
      /**
       * Format: int64
       * @description Same as packetsRetrans, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesRetrans?: number;
      /**
       * Format: int64
       * @description Same as packetsReceivedRetrans, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesReceivedRetrans?: number;
      /**
       * Format: int64
       * @description Same as packetsSendDrop, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesSendDrop?: number;
      /**
       * Format: int64
       * @description Same as packetsReceivedDrop, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesReceivedDrop?: number;
      /**
       * Format: int64
       * @description Same as packetsReceivedUndecrypt, but expressed in bytes, including payload and all the headers (IP, TCP, SRT)
       */
      bytesReceivedUndecrypt?: number;
      /**
       * Format: float64
       * @description Current minimum time interval between which consecutive packets are sent, in microseconds
       */
      usPacketsSendPeriod?: number;
      /**
       * Format: int64
       * @description The maximum number of packets that can be "in flight"
       */
      packetsFlowWindow?: number;
      /**
       * Format: int64
       * @description The number of packets in flight
       */
      packetsFlightSize?: number;
      /**
       * Format: float64
       * @description Smoothed round-trip time (SRTT), an exponentially-weighted moving average (EWMA) of an endpoint's RTT samples, in milliseconds
       */
      msRTT?: number;
      /**
       * Format: float64
       * @description Current transmission bandwidth, in Mbps
       */
      mbpsSendRate?: number;
      /**
       * Format: float64
       * @description Current receiving bandwidth, in Mbps
       */
      mbpsReceiveRate?: number;
      /**
       * Format: float64
       * @description Estimated capacity of the network link, in Mbps
       */
      mbpsLinkCapacity?: number;
      /**
       * Format: int64
       * @description The available space in the sender's buffer, in bytes
       */
      bytesAvailSendBuf?: number;
      /**
       * Format: int64
       * @description The available space in the receiver's buffer, in bytes
       */
      bytesAvailReceiveBuf?: number;
      /**
       * Format: float64
       * @description Transmission bandwidth limit, in Mbps
       */
      mbpsMaxBW?: number;
      /**
       * Format: int64
       * @description Maximum Segment Size (MSS), in bytes
       */
      byteMSS?: number;
      /**
       * Format: int64
       * @description The number of packets in the sender's buffer that are already scheduled for sending or even possibly sent, but not yet acknowledged
       */
      packetsSendBuf?: number;
      /**
       * Format: int64
       * @description Instantaneous (current) value of packetsSndBuf, but expressed in bytes, including payload and all headers (IP, TCP, SRT)
       */
      bytesSendBuf?: number;
      /**
       * Format: int64
       * @description The timespan (msec) of packets in the sender's buffer (unacknowledged packets)
       */
      msSendBuf?: number;
      /**
       * Format: int64
       * @description Timestamp-based Packet Delivery Delay value of the peer
       */
      msSendTsbPdDelay?: number;
      /**
       * Format: int64
       * @description The number of acknowledged packets in receiver's buffer
       */
      packetsReceiveBuf?: number;
      /**
       * Format: int64
       * @description Instantaneous (current) value of packetsRcvBuf, expressed in bytes, including payload and all headers (IP, TCP, SRT)
       */
      bytesReceiveBuf?: number;
      /**
       * Format: int64
       * @description The timespan (msec) of acknowledged packets in the receiver's buffer
       */
      msReceiveBuf?: number;
      /**
       * Format: int64
       * @description Timestamp-based Packet Delivery Delay value set on the socket via SRTO_RCVLATENCY or SRTO_LATENCY
       */
      msReceiveTsbPdDelay?: number;
      /**
       * Format: int64
       * @description Instant value of the packet reorder tolerance
       */
      packetsReorderTolerance?: number;
      /**
       * Format: int64
       * @description Accumulated difference between the current time and the time-to-play of a packet that is received late
       */
      packetsReceivedAvgBelatedTime?: number;
      /**
       * Format: float64
       * @description Percentage of resent data vs. sent data
       */
      packetsSendLossRate?: number;
      /**
       * Format: float64
       * @description Percentage of retransmitted data vs. received data
       */
      packetsReceivedLossRate?: number;
    };
    SRTConnList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["SRTConn"][];
    };
    WebRTCSession: {
      id?: string;
      created?: string;
      remoteAddr?: string;
      peerConnectionEstablished?: boolean;
      localCandidate?: string;
      remoteCandidate?: string;
      /** @enum {string} */
      state?: "read" | "publish";
      path?: string;
      query?: string;
      /** Format: int64 */
      bytesReceived?: number;
      /** Format: int64 */
      bytesSent?: number;
    };
    WebRTCSessionList: {
      pageCount?: number;
      itemCount?: number;
      items?: components["schemas"]["WebRTCSession"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  configGlobalGet: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlobalConf"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configGlobalSet: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlobalConf"];
      };
    };
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathDefaultsGet: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PathConf"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathDefaultsPatch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PathConf"];
      };
    };
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PathConfList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PathConf"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsAdd: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PathConf"];
      };
    };
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsPatch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PathConf"];
      };
    };
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsReplace: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PathConf"];
      };
    };
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  configPathsDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  hlsMuxersList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HLSMuxerList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  hlsMuxersGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description name of the muxer. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HLSMuxer"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description muxer not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  pathsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PathList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  pathsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Path"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspConnsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPConnList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspConnsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPConn"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspSessionsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPSessionList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspSessionsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPSession"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspSessionsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the session. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspsConnsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPConnList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspsConnsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPConn"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspsSessionsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPSessionList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspsSessionsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTSPSession"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtspsSessionsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the session. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpConnsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTMPConnList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpConnectionsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTMPConn"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpConnsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpsConnsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTMPConnList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpsConnectionsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RTMPConn"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  rtmpsConnsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  srtConnsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SRTConnList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  srtConnsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SRTConn"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  srtConnsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the connection. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  webrtcSessionsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebRTCSessionList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  webrtcSessionsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the session. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebRTCSession"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  webrtcSessionsKick: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the session. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description session not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  recordingsList: {
    parameters: {
      query?: {
        /** @description page number. */
        page?: number;
        /** @description items per page. */
        itemsPerPage?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordingList"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  recordingsGet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description name of the path. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Recording"];
        };
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description path not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  recordingsDeleteSegment: {
    parameters: {
      query: {
        /** @description path. */
        path: string;
        /** @description starting date of the segment. */
        start: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the request was successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description connection not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
